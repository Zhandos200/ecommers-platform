services:
  nats:
    image: nats:latest
    container_name: nats
    ports:
      - "4222:4222"
      - "8222:8222"
    networks:
      - micro_net

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - micro_net

  migrate-order:
    image: migrate/migrate
    volumes:
      - ./order-service/migrations:/migrations
    networks:
      - micro_net
    entrypoint: >
      migrate
      -path=/migrations
      -database=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@host.docker.internal:5432/${POSTGRES_DB_ORDERS}?sslmode=disable
      up

  migrate-user:
    image: migrate/migrate
    volumes:
      - ./user-service/migrations:/migrations
    networks:
      - micro_net
    entrypoint: >
      migrate
      -path=/migrations
      -database=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@host.docker.internal:5432/${POSTGRES_DB_USERS}?sslmode=disable
      up

  migrate-inventory:
    image: migrate/migrate
    volumes:
      - ./inventory-service/migrations:/migrations
    networks:
      - micro_net
    entrypoint: >
      migrate
      -path=/migrations
      -database=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@host.docker.internal:5432/${POSTGRES_DB_INVENTORY}?sslmode=disable
      up

  inventory-service:
    build:
      context: ./inventory-service
    container_name: inventory-service
    environment:
      DB_HOST: host.docker.internal
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB_INVENTORY}
    ports:
      - "8081:8081"
      - "50053:50053"
      - "2116:2112"
    volumes:
      - ./inventory-service/.env:/app/.env
      - ./templates:/app/templates
    networks:
      - micro_net
      - observability_net

  user-service:
    build:
      context: ./user-service
    container_name: user-service
    environment:
      DB_HOST: host.docker.internal
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB_USERS}
    ports:
      - "8083:8083"
      - "50051:50051"
      - "2114:2112"
    networks:
      - micro_net
      - observability_net

  order-service:
    build:
      context: ./order-service
    container_name: order-service
    environment:
      DB_HOST: host.docker.internal
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB_ORDERS}
      NATS_URL: nats://nats:4222
    ports:
      - "8082:8082"
      - "50052:50052"
      - "2115:2112"
    depends_on:
      - nats
    restart: always
    networks:
      - micro_net
      - observability_net

  consumer-service:
    build:
      context: ./consumer-service
    container_name: consumer-service
    environment:
      NATS_URL: nats://nats:4222
    depends_on:
      - nats
      - inventory-service
    networks:
      - micro_net
      - observability_net

  api-gateway:
    build:
      context: ./api-gateway
    container_name: api-gateway
    depends_on:
      - inventory-service
      - order-service
      - user-service
    ports:
      - "8080:8080"
      - "2113:2112"
    networks:
      - micro_net
      - observability_net
  
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - loki
      - tempo
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - observability_net

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - observability_net

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - observability_net

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - type: bind
        source: ./tempo.yaml
        target: /etc/tempo.yaml
    ports:
      - "3200:3200"
    networks:
      - observability_net


volumes:
  grafana-storage:

networks:
  micro_net:
    driver: bridge
  observability_net:
    driver: bridge
